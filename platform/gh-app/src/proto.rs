// This module contains the generated protobuf code
// The actual protobuf definitions are in proto/gh_app.proto

pub mod gh_app {
    pub mod v1 {
        // Include the generated protobuf code
        // This would be generated by prost-build
        
        // For now, we'll define the basic types that we need
        use serde::{Deserialize, Serialize};
        use chrono::{DateTime, Utc};
        
        #[derive(Debug, Clone, Serialize, Deserialize)]
        pub enum WebhookEventType {
            Unspecified = 0,
            PullRequest = 1,
            Push = 2,
            Issue = 3,
            CommitComment = 4,
        }
        
        #[derive(Debug, Clone, Serialize, Deserialize)]
        pub enum PullRequestAction {
            Unspecified = 0,
            Opened = 1,
            Synchronize = 2,
            Reopened = 3,
            Closed = 4,
            Merged = 5,
        }
        
        #[derive(Debug, Clone, Serialize, Deserialize)]
        pub enum BadgeStatus {
            Unspecified = 0,
            Pending = 1,
            Success = 2,
            Failure = 3,
            Error = 4,
        }
        
        #[derive(Debug, Clone, Serialize, Deserialize)]
        pub struct GitHubRepository {
            pub id: String,
            pub name: String,
            pub full_name: String,
            pub owner: String,
            pub private: bool,
            pub default_branch: String,
            pub html_url: String,
            pub clone_url: String,
            pub ssh_url: String,
        }
        
        #[derive(Debug, Clone, Serialize, Deserialize)]
        pub struct GitHubPullRequest {
            pub id: String,
            pub number: String,
            pub title: String,
            pub body: String,
            pub state: String,
            pub draft: bool,
            pub merged: bool,
            pub mergeable: bool,
            pub mergeable_state: String,
            pub head_sha: String,
            pub base_sha: String,
            pub repository: GitHubRepository,
            pub user: GitHubUser,
            pub assignees: Vec<GitHubUser>,
            pub requested_reviewers: Vec<GitHubUser>,
            pub labels: Vec<GitHubLabel>,
            pub created_at: DateTime<Utc>,
            pub updated_at: DateTime<Utc>,
            pub closed_at: Option<DateTime<Utc>>,
            pub merged_at: Option<DateTime<Utc>>,
        }
        
        #[derive(Debug, Clone, Serialize, Deserialize)]
        pub struct GitHubUser {
            pub id: String,
            pub login: String,
            pub name: String,
            pub email: String,
            pub avatar_url: String,
            pub user_type: String,
            pub site_admin: bool,
        }
        
        #[derive(Debug, Clone, Serialize, Deserialize)]
        pub struct GitHubLabel {
            pub id: String,
            pub name: String,
            pub description: String,
            pub color: String,
            pub default: bool,
        }
        
        #[derive(Debug, Clone, Serialize, Deserialize)]
        pub struct GitHubCommit {
            pub sha: String,
            pub message: String,
            pub author_name: String,
            pub author_email: String,
            pub committer_name: String,
            pub committer_email: String,
            pub authored_at: DateTime<Utc>,
            pub committed_at: DateTime<Utc>,
            pub parents: Vec<String>,
            pub tree_sha: String,
            pub url: String,
            pub html_url: String,
        }
        
        #[derive(Debug, Clone, Serialize, Deserialize)]
        pub struct PullRequestWebhookPayload {
            pub action: String,
            pub pull_request: GitHubPullRequest,
            pub repository: GitHubRepository,
            pub sender: GitHubUser,
            pub installation_id: String,
            pub changed_files: Vec<String>,
            pub commits: Vec<GitHubCommit>,
        }
        
        #[derive(Debug, Clone, Serialize, Deserialize)]
        pub struct PushWebhookPayload {
            pub ref_field: String,
            pub before: String,
            pub after: String,
            pub created: bool,
            pub deleted: bool,
            pub forced: bool,
            pub base_ref: String,
            pub compare: String,
            pub commits: Vec<GitHubCommit>,
            pub head_commit: GitHubCommit,
            pub repository: GitHubRepository,
            pub sender: GitHubUser,
            pub installation_id: String,
        }
        
        #[derive(Debug, Clone, Serialize, Deserialize)]
        pub struct BadgeStatusRequest {
            pub repository_id: String,
            pub pull_request_id: String,
            pub commit_sha: String,
            pub spec_document_ids: Vec<String>,
            pub installation_id: String,
            pub app_id: String,
        }
        
        #[derive(Debug, Clone, Serialize, Deserialize)]
        pub struct BadgeStatusResponse {
            pub status: BadgeStatus,
            pub message: String,
            pub target_url: String,
            pub description: String,
            pub context: String,
            pub proof_artifacts: Vec<ProofArtifactReference>,
            pub sigstore_entries: Vec<SigstoreEntry>,
            pub created_at: DateTime<Utc>,
            pub updated_at: DateTime<Utc>,
        }
        
        #[derive(Debug, Clone, Serialize, Deserialize)]
        pub struct ProofArtifactReference {
            pub artifact_id: String,
            pub spec_document_id: String,
            pub content_hash: String,
            pub proof_hash: String,
            pub rekor_entry_id: String,
            pub fulcio_certificate: String,
            pub proven_at: DateTime<Utc>,
            pub status: String,
            pub error_message: String,
        }
        
        #[derive(Debug, Clone, Serialize, Deserialize)]
        pub struct SigstoreEntry {
            pub entry_id: String,
            pub log_index: String,
            pub integrated_time: String,
            pub log_id: String,
            pub rekor_entry_url: String,
            pub fulcio_certificate_url: String,
            pub oidc_issuer: String,
            pub oidc_identity: String,
            pub signature: String,
            pub public_key: String,
            pub artifact_hash: String,
            pub artifact_type: String,
        }
        
        #[derive(Debug, Clone, Serialize, Deserialize)]
        pub struct GitHubAppConfig {
            pub app_id: String,
            pub private_key: String,
            pub webhook_secret: String,
            pub installation_id: String,
            pub client_id: String,
            pub client_secret: String,
            pub permissions: Vec<String>,
            pub events: Vec<String>,
            pub base_url: String,
            pub upload_url: String,
            pub api_version: String,
        }
        
        #[derive(Debug, Clone, Serialize, Deserialize)]
        pub struct WebhookVerificationRequest {
            pub payload: String,
            pub signature: String,
            pub webhook_secret: String,
        }
        
        #[derive(Debug, Clone, Serialize, Deserialize)]
        pub struct WebhookVerificationResponse {
            pub valid: bool,
            pub error_message: String,
            pub event_type: String,
            pub delivery_id: String,
        }
        
        #[derive(Debug, Clone, Serialize, Deserialize)]
        pub struct ProcessWebhookRequest {
            pub payload: String,
            pub signature: String,
            pub event_type: String,
            pub delivery_id: String,
            pub installation_id: String,
        }
        
        #[derive(Debug, Clone, Serialize, Deserialize)]
        pub struct ProcessWebhookResponse {
            pub success: bool,
            pub message: String,
            pub badge_updates: Vec<BadgeStatusResponse>,
            pub processed_events: Vec<String>,
        }
        
        #[derive(Debug, Clone, Serialize, Deserialize)]
        pub struct GetProofArtifactsRequest {
            pub repository_id: String,
            pub commit_sha: String,
            pub spec_document_ids: Vec<String>,
        }
        
        #[derive(Debug, Clone, Serialize, Deserialize)]
        pub struct GetProofArtifactsResponse {
            pub artifacts: Vec<ProofArtifactReference>,
            pub total_count: i32,
            pub proven_count: i32,
            pub failed_count: i32,
            pub pending_count: i32,
        }
        
        #[derive(Debug, Clone, Serialize, Deserialize)]
        pub struct HealthCheckRequest {}
        
        #[derive(Debug, Clone, Serialize, Deserialize)]
        pub struct HealthCheckResponse {
            pub status: String,
            pub version: String,
            pub uptime: String,
            pub checks: std::collections::HashMap<String, String>,
        }
    }
}

// Re-export commonly used types
pub use gh_app::v1::*; 